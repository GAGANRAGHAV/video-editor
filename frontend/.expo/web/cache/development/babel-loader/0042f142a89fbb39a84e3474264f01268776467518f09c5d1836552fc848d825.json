{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { API_ENDPOINTS } from \"./config\";\nimport * as FileSystem from 'expo-file-system';\nexport var uploadVideo = function () {\n  var _ref = _asyncToGenerator(function* (videoUri, overlays) {\n    try {\n      var formData = new FormData();\n      var fileInfo = yield FileSystem.getInfoAsync(videoUri);\n      if (!fileInfo.exists) {\n        throw new Error('Video file does not exist');\n      }\n      var fileName = videoUri.split('/').pop();\n      formData.append('video', {\n        uri: videoUri,\n        name: fileName,\n        type: 'video/mp4'\n      });\n      formData.append('overlays_json', JSON.stringify(overlays));\n      var response = yield fetch(API_ENDPOINTS.UPLOAD, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      if (!response.ok) {\n        var errorText = yield response.text();\n        throw new Error(\"Upload failed: \" + errorText);\n      }\n      return yield response.json();\n    } catch (error) {\n      console.error('Error uploading video:', error);\n      throw error;\n    }\n  });\n  return function uploadVideo(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var checkJobStatus = function () {\n  var _ref2 = _asyncToGenerator(function* (jobId) {\n    try {\n      var response = yield fetch(API_ENDPOINTS.STATUS(jobId));\n      if (!response.ok) {\n        var errorText = yield response.text();\n        throw new Error(\"Status check failed: \" + errorText);\n      }\n      return yield response.json();\n    } catch (error) {\n      console.error('Error checking job status:', error);\n      throw error;\n    }\n  });\n  return function checkJobStatus(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var downloadVideo = function () {\n  var _ref3 = _asyncToGenerator(function* (jobId, destinationUri) {\n    try {\n      var downloadResumable = FileSystem.createDownloadResumable(API_ENDPOINTS.RESULT(jobId), destinationUri, {});\n      var result = yield downloadResumable.downloadAsync();\n      return result;\n    } catch (error) {\n      console.error('Error downloading video:', error);\n      throw error;\n    }\n  });\n  return function downloadVideo(_x4, _x5) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["API_ENDPOINTS","FileSystem","uploadVideo","_ref","_asyncToGenerator","videoUri","overlays","formData","FormData","fileInfo","getInfoAsync","exists","Error","fileName","split","pop","append","uri","name","type","JSON","stringify","response","fetch","UPLOAD","method","body","headers","ok","errorText","text","json","error","console","_x","_x2","apply","arguments","checkJobStatus","_ref2","jobId","STATUS","_x3","downloadVideo","_ref3","destinationUri","downloadResumable","createDownloadResumable","RESULT","result","downloadAsync","_x4","_x5"],"sources":["D:/DEV/buttercutai_assignment/frontend/api.js"],"sourcesContent":["import { API_ENDPOINTS } from './config';\r\nimport * as FileSystem from 'expo-file-system';\r\n\r\n// Upload video with overlay metadata\r\nexport const uploadVideo = async (videoUri, overlays) => {\r\n  try {\r\n    // Create form data\r\n    const formData = new FormData();\r\n    \r\n    // Append video file\r\n    const fileInfo = await FileSystem.getInfoAsync(videoUri);\r\n    if (!fileInfo.exists) {\r\n      throw new Error('Video file does not exist');\r\n    }\r\n    \r\n    // Get filename from URI\r\n    const fileName = videoUri.split('/').pop();\r\n    \r\n    // Create file object for form data\r\n    formData.append('video', {\r\n      uri: videoUri,\r\n      name: fileName,\r\n      type: 'video/mp4', // Change if you support other formats\r\n    });\r\n    \r\n    // Append overlays as JSON\r\n    formData.append('overlays_json', JSON.stringify(overlays));\r\n    \r\n    // Send request\r\n    const response = await fetch(API_ENDPOINTS.UPLOAD, {\r\n      method: 'POST',\r\n      body: formData,\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`Upload failed: ${errorText}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error uploading video:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Check job status\r\nexport const checkJobStatus = async (jobId) => {\r\n  try {\r\n    const response = await fetch(API_ENDPOINTS.STATUS(jobId));\r\n    \r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`Status check failed: ${errorText}`);\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error checking job status:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Download rendered video\r\nexport const downloadVideo = async (jobId, destinationUri) => {\r\n  try {\r\n    const downloadResumable = FileSystem.createDownloadResumable(\r\n      API_ENDPOINTS.RESULT(jobId),\r\n      destinationUri,\r\n      {}\r\n    );\r\n    \r\n    const result = await downloadResumable.downloadAsync();\r\n    return result;\r\n  } catch (error) {\r\n    console.error('Error downloading video:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}